Q.no 1> function twoSum(nums, target) {
  const complementMap = new Map();

  for (let i = 0; i < nums.length; i++) {
    const complement = target - nums[i];

    if (complementMap.has(complement)) {
      return [complementMap.get(complement), i];
    }

    complementMap.set(nums[i], i);
  }

  return [];
}

// Example usage:
const nums = [2, 7, 11, 15];
const target = 9;
const result = twoSum(nums, target);
console.log(result); 

Q.no 2> function removeElement(nums, val) {
  let k = 0; 

  for (let i = 0; i < nums.length; i++) {
    if (nums[i] !== val) {
      nums[k] = nums[i];
      k++;
    }
  }

  return k;
}

const nums = [3, 2, 2, 3];
const val = 3;
const result = removeElement(nums, val);
console.log(result); 
console.log(nums);

Q. no. 3>function searchInsert(nums, target) {
  let left = 0;
  let right = nums.length - 1;

  while (left <= right) {
    const mid = Math.floor((left + right) / 2);

    if (nums[mid] === target) {
      return mid;
    } else if (nums[mid] < target) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }

  return left;
}


const nums = [1, 3, 5, 6];
const target = 5;
const result = searchInsert(nums, target);
console.log(result); 

Q.no\ 4> function plusOne(digits) {
  const n = digits.length;
  
 
  for (let i = n - 1; i >= 0; i--) {
   
    digits[i]++;
    
    if (digits[i] < 10) {
      return digits;
    }

Q. no.5> function merge(nums1, m, nums2, n) {
  let i = m - 1; // Pointer for nums1
  let j = n - 1; // Pointer for nums2
  let k = m + n - 1; // Pointer for merged array
  
  
  while (i >= 0 && j >= 0) {
    if (nums1[i] > nums2[j]) {
      nums1[k] = nums1[i];
      i--;
    } else {
      nums1[k] = nums2[j];
      j--;
    }
    k--;
  }
  
  
  while (j >= 0) {
    nums1[k] = nums2[j];
    j--;
    k--;
  }
}


const nums1 = [1, 2, 3, 0, 0, 0];
const m = 3;
const nums2 = [2, 5, 6];
const n = 3;
merge(nums1, m, nums2, n);
console.log(nums1);

    
    
    digits[i] = 0;
  }
  
  
  digits.unshift(1);
  
  return digits;
}

Q.no 4.> 


const digits = [1, 2, 3];
const result = plusOne(digits);
console.log(result);

